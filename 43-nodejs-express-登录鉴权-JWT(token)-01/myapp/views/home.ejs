<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="/stylesheets/style.css">
    <link rel="stylesheet" href="/stylesheets/home.css">
</head>

<body>
    <h1>后台系统-用户管理业务+权限-home页 <button onclick="onExit()">退出登录</button></h1>
    <!-- <h1>按 RESTful风格规范编写请求+响应接口 在 RESTful架构风格-介绍说明.text 文件中  可见详细说明</h1> -->
    <div class="wrapper  gg-flex-2">
        <div class="headers">home</div>
        <div class="content gg-flex-1 gg-flex-2">

        </div>
        <ul class="footer gg-flex-3">
            <li>首页</li>
            <li>列表</li>
            <li>我的</li>
        </ul>
        <input type="text" placeholder="">
    </div>
</body>
<!-- 使用 axios 进行ajax 请求 -->
<script src="/javascripts/axios.min.js"></script>
<script>
    // 设置 axios 拦截器 请求发出去之前 携带 token 请求回来之后更新本地存入的token（token的过期时间）
    axios.interceptors.request.use(function (config) {
        // console.log(`每次发出请求成功之前,会先执行的方法， `)
        let token=localStorage.getItem('token');
        // 每次给后端发请求之前 将token 设置到 header 中 传给 后端 校验 是否过期  Authorization 字段（前后端 共同约定的token字段：Authorization）
        /*
            手动模拟测试token失效 ： 手动删除 localStorage 里的token  前端传入头的token ( Authorization: 'Bearer null') 而后端通过req.headers['authorization']?.split(' ')[1]，
            字符串截获取token出来的 为 'null' string类型 ，
            字符串 'null' 不为假 进入校验token ，JWT.verify(token) 校验不通过返回 false ，给前端返回 错误码 401 及 数据
        */
        // 给后端 传入 token 时 有一个不成文的规定 就是拼接上 Bearer+空格+ token ，当然不这么写 也是可以 只是推荐这样写
        config.headers.Authorization = `Bearer ${token}`;//拼接上 Bearer+空格+ token
        console.log(' axios 拦截器',token)
        return config;
    }, function (error) {
        // console.log(`每次发出请求失败之前,会执行的方法`)
        // Do something with request error
        return Promise.reject(error);
    });
    axios.interceptors.response.use(function (response) {
        // console.log(`任何请求成功后，第一个调用的方法，然后才会走 下面 axios.post 后的.then()方法`,response)

        // 统一在拦截器中 获取后端设置在header头里面的token字段（前后端 共同约定的：Authorization）
        const { authorization } = response.headers;// header头里面的Authorization 为小写
        // 如果后端返回的Authorization为真， 存入 本地
        authorization && localStorage.setItem('token', authorization)
        // Any status code that lie within the range of 2xx cause this function to trigger
        // Do something with response data
        return response;
    }, function (error) {
        console.log(`任何请求失败后，第一个调用的方法`,error)
        // 统一处理  报错 （token 失效后端返回报错 错误码：401）
        if(error.response.status===401){// token 失效 后端返回401
            alert(`token过期，请重新登录。 后端返回数据：${error.response.data.Message}`)
            //  token 失效 销毁 本地存的token
            localStorage.removeItem('token');
            // 跳转到 登录页
            window.location.href = './login'
        }
        // Any status codes that falls outside the range of 2xx cause this function to trigger
        // Do something with response error
        return Promise.reject(error);
    });
</script>
<script>
    window.onload = () => {
        var content = document.querySelector('.content');
        // 初始化 选项卡 -默认列表页 首页注册
        // navInit('首页', content);
        navInit('列表', content)

        var ULnode = document.querySelector('.footer');
        ULnode.onclick = function (elem) {
            if (elem.target.nodeName == 'LI') {
                let text = elem.target.textContent;
                // 切换选项卡
                navInit(text, content)
            }

        }
    }
    function showEdit(elem, id) {
        let node = document.querySelector(".editInfo");
        node.innerHTML = modifyTemplate(id);
        node.style.display == 'none' && (node.style.display = 'block');
        // node && node.style.display == 'none' ? (node.style.display = 'block') : (node.style.display = 'none');
        console.log(elem.target)
        let _id = id != undefined && id ? id : getCookie()._id;
        console.log(_id, id != undefined, getCookie())
        if (_id) {
            let node = document.querySelector(".userid");
            // 本地 cookie 中的 _id 是后端存入的是最近一次注册的_id
            node.innerHTML = `用户_id：${_id && _id != 'undefined' ? _id : '<input type="text" id="_id" placeholder="请手动输入要修改的_id"><span>当前cookie中没有后端存入的是最近一次注册的_id,请手动输入要修改的_id</span>'}`;
        }
    }
    function getParams() {
        return {
            username: document.querySelector('#username').value,
            password: document.querySelector('#password').value,
            age: document.querySelector('#age').value,
        }
    }
    function getCookie() {
        // 获取 cookie
        let cookieData = {};
        document.cookie.split(';').forEach((param) => {
            // 以=分割 数组每一项 的 字符串 取出key val
            let [key, val] = param.split('=');
            key = key.replace(/\s+/g, "");// 去除空格
            cookieData[key] = val;
        })
        return cookieData;
    }
    // 修改 - 个人信息 - // 按照 和后端约定的 语义化规范 - RESTful风格规范 编写 请求 - PUT 请求为 修改数据
    function update(_id) {
        _id = _id || getCookie()._id;
        if (_id == 'undefined') {
            let node_Id = document.querySelector('#_id');
            if (!node_Id || node_Id.value.replace(/\s+/g, "") == '') {
                alert('用户_id 不能为空');
                return node_Id.focus();
            }
        }
        let data = getParams();
        // fetch(`/api/user/${_id}`, {
        //     method: 'PUT',
        //     body: JSON.stringify(data),//传入参数
        //     headers: { 'Content-Type': 'application/json' },// 请求头信息配置 告诉后端传入的参数是什么格式(当前为application/json JSON字符串格式) 按什么格式解析参数
        // }).then(res => res.json()).then(res => {
        //     console.log(res)
        //     if (res.Code == 0) {
        //         alert(`${res.Message},请重新刷新页面`)
        //     } else {
        //         alert(`${res.Message}`);
        //         return window.location.href = '/login'
        //     }
        // })
        axios.put(`/api/user/${_id}`, { ...data }).then(res => {
            console.log(res);
            if (res.data.Code == 0) {
                alert(`${res.data.Message},请重新刷新页面`)
            } else {
                alert(`${res.data.Message}`);
                // axios 拦截器 中 统一处理 token 失效 进入登录页
                // return window.location.href = '/login'
            }
        }).catch(err => {
            console.log(err)
        })
    }
    // 删除 - 个人信息 数据 - // 按照 和后端约定的 语义化规范 - RESTful风格规范 编写 请求 - DELETE 请求为 删除数据
    function deleteUser(_id) {
        let result = confirm("你确定要删除吗?");
        if (result) {
            _id = _id || getCookie()._id;
            // fetch(`/api/user/${_id}`, {
            //     method: 'DELETE',
            //     // body: JSON.stringify(data),//传入参数
            //     headers: { 'Content-Type': 'application/json' },// 请求头信息配置 告诉后端传入的参数是什么格式(当前为application/json JSON字符串格式) 按什么格式解析参数
            // }).then(res => res.json()).then(res => {
            //     console.log(res)
            //     if (res.Code == 0) {
            //         alert(`${res.Message},请重新刷新页面`)
            //     } else {
            //         alert(`${res.Message}`);
            //         return window.location.href = '/login'
            //     }
            // })

            axios.delete(`/api/user/${_id}`).then(res => {
                console.log(res)
                if (res.data.Code == 0) {
                    alert(`${res.data.Message},请重新刷新页面`)
                } else {
                    alert(`${res.data.Message}`);
                    // axios 拦截器 中 统一处理 token 失效 进入/login登录页
                    // return window.location.href = '/login'
                }
            }).catch(err => {
                console.log(err)
            })
        }

    }
    let paging = {
        total: 0,// 总数据条数
        pageNumber: 1,// 当前第几页
        pageSize: 10,// 一页 多少条数据
    }
    // 获取注册 列表 - // 按照 和后端约定的 语义化规范 - RESTful风格规范 编写 请求 - GET 请求为 获取数据
    function getList(content) {
        // fetch(`/api/user?pageNumber=${paging.pageNumber}&pageSize=${paging.pageSize}`, {
        //     method: 'get',
        //     // body: JSON.stringify(paging),//传入参数
        //     headers: { 'Content-Type': 'application/json' },// 请求头信息配置 告诉后端传入的参数是什么格式(当前为application/json JSON字符串格式) 按什么格式解析参数
        // }).then(res => res.json()).then(res => {
        //     console.log(res);
        //     if (res.Code != 0) {
        //         alert(`${res.Message}`);
        //         return window.location.href = '/login'
        //     }
        //     paging.total = res.Data.Total;// 总数据条数
        //     let list = res.Data.list.map((item, index) => {
        //         return `
        //         <tr id=${item._id}>
        //                             <td>${item._id}</td>
        //                             <td style='display:none'>${item.uid ? item.uid : '已经不需要生成uid=' + item.uid}</td>
        //                             <td>${item.username}</td>
        //                             <td>${item.age}</td>
        //                             <td>
        //                                 <button onclick=showEdit(event,'${item._id}')>
        //                                     修改
        //                                 </button>
        //                                 <button onclick=deleteUser('${item._id}')>
        //                                     删除
        //                                 </button>
        //                             </td>
        //                         </tr>
        //         `
        //         // return `<li class="gg-flex-3" id="${item._id}">
        //         //             <div class="liItem">序号:${index}</div>
        //         //             <div class="liItem">username:${item.username}</div><div class="liItem">age:${item.age}</div> 
        //         //             <button onclick=showEdit(event,'${item._id}')>
        //         //                 修改
        //         //             </button>
        //         //             <button onclick=deleteUser('${item._id}')>
        //         //                 删除
        //         //             </button>
        //         //         </li>`
        //     });
        //     // 页数-向上取整
        //     let pages = Math.ceil(paging.total / paging.pageSize);
        //     let pagesbtn = '';
        //     for (let i = 1; i <= pages; i++) {
        //         // console.log(i)
        //         pagesbtn += `<button onclick=pagingNum('${i}')>${i}</button>`;
        //     }
        //     let template = `<div class="editInfo"  style="display:none;">
        //                     </div>
        //                     <div class='list'>
        //                         <table>
        //                             <thead>
        //                                 <tr>
        //                                     <td>_id</td>
        //                                     <td style='display:none'>uid</td>
        //                                     <td>用户名</td>
        //                                     <td>年龄</td>
        //                                     <td>操作</td>
        //                                 </tr>
        //                             </thead>
        //                             <tbody>
        //                                 ${list.join('')}
        //                             </tbody>
        //                         </table>
        //                     </div>
        //                     <div class="paging gg-flex-1">
        //                             <div style="color:red;">第 ${paging.pageNumber} 页</div>
        //                             ${pagesbtn}
        //                             <div>一页:${paging.pageSize} 条</div>
        //                             <div>总条数:${paging.total}</div>
        //                         <button onclick=prevPage()>
        //                                     上一页
        //                         </button>
        //                         <button onclick=nextPage()>
        //                                     下一页
        //                         </button>
        //                     </div>
        //                     `;

        //     content.innerHTML = template;
        // })

        axios.get(`/api/user?pageNumber=${paging.pageNumber}&pageSize=${paging.pageSize}`).then(res => {
            console.log(res);
            if (res.data.Code != 0) {
                return alert(`${res.data.Message}`);
                // axios 拦截器 中 统一处理 token 失效 进入/login登录页
                    // return window.location.href = '/login'
            }
            paging.total = res.data.Data.Total;// 总数据条数
            let list = res.data.Data.list.map((item, index) => {
                return `
                <tr id=${item._id}>
                                    <td>${item._id}</td>
                                    <td style='display:none'>${item.uid ? item.uid : '已经不需要生成uid=' + item.uid}</td>
                                    <td>${item.username}</td>
                                    <td>${item.age}</td>
                                    <td>
                                        <button onclick=showEdit(event,'${item._id}')>
                                            修改
                                        </button>
                                        <button onclick=deleteUser('${item._id}')>
                                            删除
                                        </button>
                                    </td>
                                </tr>
                `
                // return `<li class="gg-flex-3" id="${item._id}">
                //             <div class="liItem">序号:${index}</div>
                //             <div class="liItem">username:${item.username}</div><div class="liItem">age:${item.age}</div> 
                //             <button onclick=showEdit(event,'${item._id}')>
                //                 修改
                //             </button>
                //             <button onclick=deleteUser('${item._id}')>
                //                 删除
                //             </button>
                //         </li>`
            });
            // 页数-向上取整
            let pages = Math.ceil(paging.total / paging.pageSize);
            let pagesbtn = '';
            for (let i = 1; i <= pages; i++) {
                // console.log(i)
                pagesbtn += `<button onclick=pagingNum('${i}')>${i}</button>`;
            }
            let template = `<div class="editInfo"  style="display:none;">
                            </div>
                            <div class='list'>
                                <table>
                                    <thead>
                                        <tr>
                                            <td>_id</td>
                                            <td style='display:none'>uid</td>
                                            <td>用户名</td>
                                            <td>年龄</td>
                                            <td>操作</td>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        ${list.join('')}
                                    </tbody>
                                </table>
                            </div>
                            <div class="paging gg-flex-1">
                                    <div style="color:red;">第 ${paging.pageNumber} 页</div>
                                    ${pagesbtn}
                                    <div>一页:${paging.pageSize} 条</div>
                                    <div>总条数:${paging.total}</div>
                                <button onclick=prevPage()>
                                            上一页
                                </button>
                                <button onclick=nextPage()>
                                            下一页
                                </button>
                            </div>
                            `;

            content.innerHTML = template;
        }).catch(err => {
            console.log(err)
        })
    }
    //  注册 + 修改 html模板
    function modifyTemplate(_id, btn) {
        return `${!btn ? '<div class="userid gg-flex-3"> // 用户ID： </div>' : ''}
                <div>
                    用户名：<input type="text" id="username">
                </div>
                <div>
                    密码：<input type="password" id="password">
                </div>
                <div>
                    年龄：<input type="number" id="age">
                </div>
                ${btn ? btn : "<button onclick=update('" + _id + "')>提交</button>"}
        `
    }
    // 选项卡
    function navInit(text, content) {
    // 选项卡 - 背景色
        document.querySelectorAll('.footer>li').forEach(item=>{
            if(item.textContent!=text){
                item.style.color='#333';
                item.style.background='';
            }else{
                item.style.color='#fff';
                item.style.background='red';
            }
        })
        let template;
        switch (text) {
            case '首页':
                template = `<div>
                                ${modifyTemplate('', '<button onclick="register()">注册</button>')}
                            </div>`
                content.innerHTML = template;
                break;
            case '列表':
                return getList(content);
            // template += `<div>列表</div>`
            // break;
            case '我的':
                template = `<ul class='mine'>
                                    <li>
                                        <button class="setinfo" onclick='showEdit(event)'>点击修改个人信息（最近一次注册的）</button>
                                        <div class="editInfo"  style="display:none;">
                                        </div>
                                    </li>
                                </ul>`
                content.innerHTML = template;
                break;

            default:
                break;
        }
    }
    // 首页-注册 - // 按照 和后端约定的 语义化规范 - RESTful风格规范 编写 请求 - POST 请求为 更新 添加数据
    function register() {
        let params = getParams();
        console.log(params)
        // fetch('/api/user', {
        //     method: 'POST',
        //     body: JSON.stringify(params),
        //     headers: { 'Content-Type': 'application/json' },// 请求头信息配置 告诉后端传入的参数是什么格式(当前为application/json JSON字符串格式) 按什么格式解析参数
        // }).then(res => {
        //     //  接口返回的为json数据 直接 return res.json(); 按JSON的格式去解析返回数据 具体案例  14-node内置模块-http模块-跨域-cors 中有描述
        //     return res.json();
        // }).then(res => {
        //     console.log(res);
        //     alert(`${res.Message}`)
        //     if (res.Code != 0) {
        //         return window.location.href = '/login'
        //     }
        // })
        axios.post('/api/user', { ...params }).then(res => {
            console.log(res);
            alert(`${res.data.Message}`)
            if (res.data.Code != 0) {
               // axios 拦截器 中 统一处理 token 失效 进入/login登录页
                    // return window.location.href = '/login'
            }
        }).catch(err => {
            console.log(err)
        })
    }
    // 上一页
    function prevPage() {
        console.log(paging)
        if (paging.pageNumber > 0) {
            paging.pageNumber--;
            let content = document.querySelector('.content');
            getList(content)
        } else {
            return alert(`${paging.pageNumber},已至首页`)
        }

    }
    // 下一页
    function nextPage() {
        // 页数-向上取整 - 最大页码
        let pages = Math.ceil(paging.total / paging.pageSize);
        if (paging.pageNumber < pages) {
            paging.pageNumber++;
            let content = document.querySelector('.content');
            getList(content)
        } else {
            return alert(`${paging.pageNumber},已至尾页`)
        }
    }
    // 直接 - 点击页码
    function pagingNum(num) {
        num = Number(num);
        // if (paging.pageNumber != num) {
        paging.pageNumber = Number(num);
        console.log(paging)
        let content = document.querySelector('.content');
        getList(content)
        // } else {
        //     return alert(`当前已在第：${paging.pageNumber}页`)
        // }
    }
    // 退出登录 - 销毁 本地存的token
    function onExit() {
        // 销毁 本地存的token
        localStorage.removeItem('token');
        window.location.href = './login'
        // fetch('/api/logout',).then(res=>res.json()).then(res=>{
        //     console.log(res)
        //     // 退出成功
        //     if(res.Code == 0){
        //         window.location.href = './login'
        //     }
        // })
        // axios.get('/api/logout').then(res => {
        //     console.log(res)
        //     // 退出成功
        //     if (res.data.Code == 0) {
        //         window.location.href = './login'
        //     }
        // }).catch(err => {
        //     console.log(err)
        // })
    }
</script>

</html>