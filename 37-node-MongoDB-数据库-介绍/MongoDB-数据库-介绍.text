
其他人整理nodejs学习资料地址https://github.com/wangchen130/qianfeng-nodejs-notes

数据库的介绍：
    数据库是干什么，在网上查时有很多的专业术语，通常会告诉你数据库是按照什么样的方式来存储我们的数据。
    其实可以想一下，从前端拿过来的 usename（用户名） 或 password（密码）需要给它存起来 不丢失，那不用数据库 直接存在一个文件中不是也可以吗 ，
    当然如果是自己玩的话直接存文件也是可以的，但想一想 数据量一旦大了之后，存在文件中首先 读写文件比较费劲、然后在从里面 检索 你想要的数据就更别提了，效率的话可想而知。
    所以在这里一般对于 数据持久化的存储 不会放在文件中，而应该放在数据库中，它在这里可以提供一些 高性能的查询方式、帮助我们保持事务的一致性 ，
    一些高效、自由按照一种易于查询的方式来存储我们的数据，包括 载储、自动故障转移等等 一些各种各样的好处 所以说数据库也作为一个单独的产品发布出来了，比文件的方式高级多了。

MongoDB （是非关系型数据库 ，增，删，改，查等操作）

数据库分为 两种类型 - 关系型与非关系型数据库

1:关系型与非关系型数据库 的区别
    1-1：关系型数据库 （其实说明就是有关系的，我们数据库建立完之后，表与表之间可以建立关联，例如：A表是B表的外键，对应外键A表删除某个数据，B表也会关联性的删除 ）
    特点：
        (1) sql语句增，删，改，查操作。
        (2) 保持事务的一致性,事务机制（回滚）。
        关系型数据库如：sqllite 、mysql、sqlserver、db2、oracle
    
    1-2：非关系型数据库 （功能相对关系型数据库 稍弱）
    特点：
        (1) no sql:no only sql;
        (2) 轻量、高效、自由。
        非关系型数据库如： mongodb 、Hbase、Redis

2:为啥喜欢 mongodb?
    由于MongoDB独特的数据处理方式，可以将热点数据加载到内存，
    故而对查询来讲，非常快（当然也会非常消耗内存）;
    同时由于采用了BSON（BSON 其实就是二进制的JSON）的方式存储数据，
    故而对JSON格式数据具有非常友好的支持性以及友好的表结构修改性，
    文档式的存储方式，数据友好可见；
    数据库的分片集负载具有非常好的扩展性以及非常不错的自动故障转移。

3:数据库(关系型与非关系型)的不同术语 如先:
SQL术语/概念（关系型数据库叫法）            MongoDB术语/概念（非关系型数据库叫法）              解释/说明
database                                    database                                       数据库
tab                                         collection                                     数据库表(关系型数据库中称为)，集合（非关系型数据库称为）
row                                         document                                       数据记录行(关系型数据库中称为)，文档（非关系型数据库称为）
column                                      field                                          数据字段(关系型数据库中称为)，域（非关系型数据库称为）
index                                       index                                          索引
table joins                                                                                表连接,MongoDB不支持
primary key                                 primary key                                    主键(关系型数据库中称为)，MongoDB自动将 id字段设置为主键


4:安装数据库
    4-1:需要安装的exe版本:
        MongoDB 下载地址：https://www.mongodb.com/docs/manual/administration/install-community/
        根据系统 选择： Install on Windows  点击下载:  Install MongoDB using msiexec.exe.文件

    4-2:免安装的 zip压缩包地址: https://www.mongodb.com/try/download/community 选择windows x64  zip

4-3:也可以 解压 当前 37-node-MongoDB-数据库-介绍文件 夹已经下载好的 MongoDB免安装压缩包 mongodb-win32-x86_64-2008plus-ssl-4.0.28

MongoDB 配置环境变量 可参考 https://www.jianshu.com/p/a2437574a4bb
当然不配置也是可以的,但是每次都要到你的解压的目录去开启服务,这样就很难受.所以我们可以做这样的配置.


当前使用的版本为 4.0.28  解压的地址在 F:\数据库\MOngoDB\mongodb-win32-x86_64-2008plus-ssl-4.0.28\bin

5: 免安装MOngoDB bin文件夹下的文件介绍:

    mongod.exe 是mongoDB数据库服务端启动程序   启动完之后提供一个服务 可以通过客户端 来连接 这个服务
    mongo.exe 是mongoDB数据库shell 客户端启动程序  通过客户端来连接服务端启动之后提供的服务
    bsondump.exe 是bson转换工具
    mongodump.exe 是逻辑备份工具
    mongorestore.exe 是逻辑恢复工具
    mongoexport.exe 是数据导出工具
    mongoimport.exe 是数据导入工具
    mongofiles.exe 是GridFS文件工具
    mongostat.exe 是状态监控工具
    mongotop.exe 是读写监控工具
    mongos.exe 是分片路由工具

    概念：先启动mongod.exe服务端的程序 然后利用 mongo.exe客户端 来测试这个服务有没有启动成功，启动成功就可以进行 增，删，改，查等操作。

6：启动 MOngoDB 数据库流程 当前为未配置 环境变量
    6-1 启动服务端：
        cmd 启动终端
        执行命令 ： .\mongod.exe --dbpath=D:\project\electron\node-demo\37-node-MongoDB-数据库-介绍\myapp\db
        解释命令： .\mongod.exe （启动服务端程序）
        --dbpath=D:\project\electron\node-demo\37-node-MongoDB-数据库-介绍\myapp\db （ 指定一个文件夹（db ），数据库的服务必须依托于一个文件夹，因为要存放数据库文件等 ）

    注意：db 文件夹 需要自行创建 当前因为git 提交代码 因此会 忽略不提交db 文件夹 后续拉取代码 自己在 myapp 文件夹下 创建 一个db 文件夹 存放数据库文件

注意：解压免安装MOngoDB的文件夹 和 存放数据库的文件夹 尽量是 纯英文路径 纯英文文件夹 ，否则启动可能会存在问题

启动完成之后  创建表 创建数据库 终端都会打印输出显示 终端不可以关闭 相当于服务启动好了 关闭启动的终端 相当于服务就宕机了

    6-2 启动客户端：
        新建一个 终端 cmd 启动终端
        执行命令 ： .\mongo.exe
        查看是否能够连接 刚刚启动的服务端 如果可以连接 会输出一下东西 或者 查看启动 服务端程序 的终端会输出（告诉你有一个连接 ） I NETWORK  [listener] connection accepted from 127.0.0.1:50016 #1 (1 connection now open)

        连接成功 就可以在 启动客户端的 终端 执行一些命令 如：db （db默认的命令查询 然后回车 可以看输出为 test（当前数据库的名字） ）

7：MongoDB基本命令的使用
help （是一个帮助命令）可以看到基本操作命令
show dbs:显示数据库列表
show collections：显示当前数据库中的集合（类似关系数据库中的表）
show users：显示用户
use <db name>：切换当前数据库，这和MS-SQL里面的意思一样
db.help()：显示数据库操作命令，里面有很多的命令
db.foo（foo-数据库名）.help()：显示集合操作命令，同样有很多的命令，foo指的是当前数据库下，一个叫foo的集合，并非真正意义上的命令
db.foo（foo-数据库名）.find()：对于当前数据库中的foo集合进行数据查找（由于没有条件，会列出所有数据）
db.foo（foo-数据库名）.find( { a : 1 } )：对于当前数据库中的foo集合进行查找，条件是数据中有一个属性叫a，且a的值为1

    7-1：实操-执行命令案例：
        7-1-(1)// 显示数据库列表
        show dbs
        7-1-(2)// 创建数据库，如果数据库存在那就是切换到该name名的数据库 (如：创建一个自己的数据库 输出命令 use xingxin_test )
        use <db name>
        7-1-(3)// 查看当前在那个数据库 （执行db可见 当前在的数据库 为自己刚刚创建的 xingxin_test 数据库）
        db
        7-1-(4)/*  查看数据库列表 发现 刚刚创建的 xingxin_test 数据库并不在数据库列表中,
            如果想要你的数据库能够被查询出来必须要往数据库内放你的第一个表（或者在MongoDB非关系型数据库中叫集合：collection），
            因为你现在数据库是空的，你没有任何证据说明 这个数据库是你的。所以得往里面放点东西。就是往里面插入第一个表（或者在MongoDB非关系型数据库中叫集合：collection）
        */
        show dbs

        7-1-(5)/* 创建插入 表 （或者在MongoDB非关系型数据库中叫集合：collection），
                需要注意 创建插入表时 是不是在对应的数据库中 可以通过执行命令 db 确认当前所在数据库的位置 如果不是 执行 use <db name> 切换数据库。
                db.createCollection('第一个参数表的名字',{第二个参数是一个对象设置表的信息});
                如下：
                db.createCollection('users',{size:5242880,capped:true,max:5000});
                解释说明：创建一个名为 users的集合，size是配置限制该集合的最大存储空间为5m，
                max是配置限制最多只能存5000个文档的集合，如果超出5000条 如5001 那会把第一条给顶掉，就会变成第二条到5001条数据了
        */
        db.createCollection('users') // 创建插入 一个名为 users的集合

        7-1-(6)// 再次执行  show dbs 查看 数据库列表 就可以看到之前创建的数据库 xingxin_test
        show dbs
        7-1-(7)// 删除数据库 直接执行是删除 当前所在的数据库
        db.dropDatabase()
        7-1-(8)// 再次执行  show dbs 查看 数据库列表 之前创建的数据库 xingxin_test  被删除 就没有了
        show dbs


    7-2： 对于 表（在MongoDB非关系型数据库中叫集合：collection）的一些 操作命令：
        7-2-1：//获取指定名称的 表（在MongoDB非关系型数据库中叫集合：collection）;
        db.getCollection('users');// 如当前是在 xingxin_test 数据库 指定获取名为 users的集合

        7-2-2：/*
            获取当前db的所有表（在MongoDB非关系型数据库中叫集合：collection）;
            db就是当前的数据库 如当前是在 xingxin_test 数据库,获取到之前创建的users表 [ "users" ] ，之前只创建了一个表所以返回的数组内只有一条内容
            可以多创建几个集合执行命令如：db.createCollection('news'), db.createCollection('products') 再次获取当前db下的所有表
        */
        db.getCollectionNames();//

       7-2-3：//显示当前db（db就是当前的数据库 如当前是在 xingxin_test 数据库，获取到之前创建的users表的状态，）所有表的状态 （在MongoDB非关系型数据库中叫集合：collection）
        db.printCollectionStats();//

        7-2-4：/*删除- 如果不想该数据库下的 某个集合 就可以进行删除
            执行命令如：db.news.drop();
            解释说明：通过 db.users（表或叫集合的name名）.drop() 进行删除。
            通过执行 db.getCollectionNames() 就会发现 该表已经被删除不存在了
        */
        db.users.drop();

         7-2-4：  某个字段 去重 后的数据
         /*
            执行命令如： db.users.distinct('age');
            解释说明：通过 db.users（表或叫集合的name名）.distinct('age') 查询 age字段 并且去除 重复的值 。
            终端输出 ：[ 18, 20, 21, 22, 23, 24, 25, 26 ]

            可以通过 执行 db.users.find() 查询表中所有的数据 是存在 多个 age=18 的数据 ，通过 distinct('age') 进行去除 重复的值 
         */
        db.users.distinct('age')

    7-3： 对于 某一个 表（在MongoDB非关系型数据库中叫集合：collection）增，删，改，查 的一些 操作命令：
        7-3-1：表（集合）- 增加数据 /*
            增加 - 在表（集合）中添加一条数据 传入一个对象
            执行命令如：db.users.save({username:'小明',age:18})
            解释说明：通过 db.users（表或叫集合的name名）.save({添加存储的内容传入一个对象}) 方法 添加存储
            终端输出 WriteResult({ "nInserted" : 1 }) 表示成功了
            可通过 执行命令： db.users.find() 查询 证明成功添加数据
            终端输出 ：{ "_id" : ObjectId("64ccae60096d0763eb92c67a"), "username" : "小明", "age" : 18 }
            "_id" : ObjectId("64ccae60096d0763eb92c67a"), 为自动生成的 主键（primary key），将来可以通过这个 唯一的主键 查到这条数据 或 进行删除 等操作

            如果想要批量 添加多条数据 传入一个数组
            执行命令如：db.users.save([{username:'小红',age:22},{username:'小花',age:20}])
            再次执行命令： db.users.find() 查询 是否成功添加数据

             终端输出 ：{ "_id" : ObjectId("64ccae60096d0763eb92c67a"), "username" : "小明", "age" : 18 }
            { "_id" : ObjectId("64ccb0f2096d0763eb92c67c"), "username" : "小红", "age" : 22 }
            { "_id" : ObjectId("64ccb0f2096d0763eb92c67d"), "username" : "小花", "age" : 20 }


            // 当然你还可以这样添加数据如： db.users.save({name:'小胖子',myage:'99',aaa:'测试'})
           再次执行命令： db.users.find() 查询 是否成功添加数据
            { "_id" : ObjectId("64ccae60096d0763eb92c67a"), "username" : "小明", "age" : 18 }
            { "_id" : ObjectId("64ccb0f2096d0763eb92c67c"), "username" : "小红", "age" : 22 }
            { "_id" : ObjectId("64ccb0f2096d0763eb92c67d"), "username" : "小花", "age" : 20 }
            { "_id" : ObjectId("64ccbf98096d0763eb92c67e"), "name" : "小胖子", "myage" : "99", "aaa" : "测试" }
            { "_id" : ObjectId("64ccc011096d0763eb92c67f"), "name" : "小胖子2", "myage" : "99", "aaa" : "测试" }
            可以发现 这次传入的数据 字段名 甚至是 域的个数（可以理解为对象的长度） 类型 都和之前的 添加的（如： db.users.save({username:'小明',age:18})）都不一样
            这就是 MongoDB（非关系型数据库） 区分于 关系型数据库 的重大区别 ：自由 （在序列号1:中有介绍）

            在mySQL（关系型数据库）中你就会发现，必须前提确定好 域的个数（可以理解为对象的长度） ，每个字段里面确定只能存的类型 如：字符串 或 number类型的 就不能在存其他的数据类型了。
            而在 MongoDB（非关系型数据库）不管是 啥字段 ，不限制 字段类型、 域的个数（可以理解为对象的长度），随便存都可以，所以是真的：自由。
            但是太自由也不行，后续在使用nodejs 真正操作时 会加上一点限制，因为一张 表（在MongoDB非关系型数据库中叫集合：collection） 存的字段不一样 没有什么意义

        */
        db.users.save({username:'小明',age:18})//增加 添加单条数据 传入对象
        db.users.save([{username:'小红',age:22},{username:'小花',age:20}])//批量增加 添加多条数据 传入数组

        7-3-2：表（集合）- 删除数据：/*
            删除 - 在表（集合）中删除一条数据 传入一个对象
            执行命令如：db.users.remove({myage:"99"})
            解释说明：通过 db.users（表或叫集合的name名）.remove({需要删除的相关字段-传入一个对象}) 方法，
            删除那一列数据，当前会删除2条与 myage:'99' 字段及val值 相匹配（必须是完全匹配）的 数据。

            注意：
           db.users.remove({})//传入一个空对象 会将这个表里的内容全部删除
        */
        db.users.remove({myage:"99"})//删除指定对象的 表（集合）中 单条删除
        db.users.remove({})// 表（集合）内的数据  删除所有的

        7-3-3：表（集合）-修改数据：/*
            修改 - 在表（集合）中修改某一条数据 如： db.users.update({username:"小明"},{$set:{age:200}}) 传入一个对象 第一个参数为查找到某一项 ，
            第二个参数 为一个对象需要通过 $set 声明 要需要的对象。

            注意-- 非常危险--执行命令（1） 如： db.users.update({username:"小明"},{age:200})
            这样修改，它会直接给你替换掉这一列数据， db.users.find() 查询 这一条数据就变成如： { "_id" : ObjectId("64ccae60096d0763eb92c67a"), "age" : 200 } 这种方式就非常危险。
            修改-仅修改
            执行命令（2）如： db.users.update({username:"小明"},{$set:{age:200}})
            解释说明：通过 db.users（表或叫集合的name名）.update({第一个参数是找到username:"小明"的那一列数据-传入一个对象},{$set是表示要修改:{age:200表示要修改的内容-传入一个对象}}) 方法，
            db.users.find() 查询 这一条数据就变成如：{ "_id" : ObjectId("64ccae60096d0763eb92c67a"), "username" : "小明", "age" : 200 }

            修改-增加
            执行命令（3）如： db.users.update({username:"小明"},{$inc:{age:18}})
            解释说明：通过 db.users（表或叫集合的name名）.update({第一个参数是找到username:"小明"的那一列数据-传入一个对象},{$inc是表示要增加:{age:18表示要增加的内容得出来 200+(18) =218 -传入一个对象}}) 方法，
            db.users.find() 查询 这一条数据就变成如：{ "_id" : ObjectId("64ccae60096d0763eb92c67a"), "username" : "小明", "age" : 218 }

            修改-减 这里直接通过 负数 如：-200 就可以去减
            执行命令（4）如： db.users.update({username:"小明"},{$inc:{age:-200}})
            解释说明：通过 db.users（表或叫集合的name名）.update({第一个参数是找到username:"小明"的那一列数据-传入一个对象},{$inc是表示要增加:{age:-200表示要增加的内容得出来 218+(-200) =18 -传入一个对象}}) 方法，
            db.users.find() 查询 这一条数据就变成如：{ "_id" : ObjectId("64ccae60096d0763eb92c67a"), "username" : "小明", "age" : 18 }

            注意： $inc 只能应用于数字类型的值，进行 加 或 减 否则报错。
        */
        // 通过 $set 修改值
        db.users.update({username:"小明"},{$set:{age:200}}) 或  db.users.update({username:"小明"},{$set:{age:200}},false,true)

        // 通过 $inc 修改值 - 增加值（正数即可 如：200 ） 注意只能应用于数字类型的值，进行 加 或 减 否则报错。
        db.users.update({username:"小明"},{$inc:{age:18}})

        // 通过 $inc 修改值 - 减值（负数即可 如：-200 ） 注意只能应用于数字类型的值，进行 加 或 减 否则报错。
        b.users.update({username:"小明"},{$inc:{age:-200}})



        7-3-4：表（集合）- 查询数据：/*
            db.users.find()
         */

        7-3-4-1：查询所有 // find() 不传 参数 为 查询出来 当前 表（集合）的所有数据
        db.users.find()

        7-3-4-2：查询 username=小明 age=18 的记录数据  // find() 传入参数 为 查询出来 当前 表（集合）的所有包含 {"username":"小明","age":18} 的数据 如：{ "_id" : ObjectId("64ccae60096d0763eb92c67a"), "username" : "小明", "age" : 18 }
        db.users.find({"username":"小明","age":18})

        7-3-4-3：查询 age=18 的记录数据 /*
            筛选- 如所有age=18的数据
            find({"age":18}) 传入参数 为 查询出来 当前 表（集合）的所有age=18的数据
            如：{ "_id" : ObjectId("64ccae60096d0763eb92c67a"), "username" : "小明", "age" : 18 }
                { "_id" : ObjectId("64d05eece3a439a763261afb"), "username" : "小方", "age" : 18 }
        */
         db.users.find({"age":18})

        7-3-4-4： 查询 age>18 的记录数据 /*
             筛选- 如所有 age > 18的数据 通过$gt 筛选 注意只能应用于数字类型的值
             执行命令 如：db.users.find({"age":{$gt:18}})
             解释说明：通过db.users（表或叫集合的name名）.find({"age":{$gt:18}}) 传入一个要查询的对象{"age":{$gt:18}}  $gt表示 > 大于18的 注意只能应用于数字类型的值

             终端输出:{ "_id" : ObjectId("64ccb0f2096d0763eb92c67c"), "username" : "小红", "age" : 22 }
                    { "_id" : ObjectId("64ccb0f2096d0763eb92c67d"), "username" : "小花", "age" : 20 }
        */
        db.users.find({"age":{$gt:18}})

        7-3-4-5： 查询 age<20 的记录数据 /*
             筛选- 如所有 age < 20 的数据 通过$lt 筛选 注意只能应用于数字类型的值
             执行命令 如：db.users.find({"age":{$lt:20}})
             解释说明：通过db.users（表或叫集合的name名）.find({"age":{$lt:20}})  传入一个要查询的对象 {"age":{$lt:20}} $lt 表示 < 小于 20 的 注意只能应用于数字类型的值


            终端输出:{ "_id" : ObjectId("64ccae60096d0763eb92c67a"), "username" : "小明", "age" : 18 }
                    { "_id" : ObjectId("64d05eece3a439a763261afb"), "username" : "小方", "age" : 18 }
        */
        db.users.find({"age":{$lt:20}})

        7-3-4-6： 查询 age>=18 的记录数据 /*
             筛选- 如所有 age >= 18的数据 通过$gte 筛选 注意只能应用于数字类型的值
             执行命令 如：db.users.find({"age":{$gte:18}})
             解释说明：通过db.users（表或叫集合的name名）.find({"age":{$gte:18}})  传入一个要查询的对象 {"age":{$gte:18}} $gte 表示 >= 大于等于18的 注意只能应用于数字类型的值

            终端输出:{ "_id" : ObjectId("64ccae60096d0763eb92c67a"), "username" : "小明", "age" : 18 }
                    { "_id" : ObjectId("64ccb0f2096d0763eb92c67c"), "username" : "小红", "age" : 22 }
                    { "_id" : ObjectId("64ccb0f2096d0763eb92c67d"), "username" : "小花", "age" : 20 }
                    { "_id" : ObjectId("64d05eece3a439a763261afb"), "username" : "小方", "age" : 18 }
        */
        db.users.find({"age":{$gte:18}})

        7-3-4-7： 查询 age<=20 的记录数据 /*
             筛选- 如所有 age <= 20 的数据 通过 $lte 筛选 注意只能应用于数字类型的值
             执行命令 如：db.users.find({"age":{$lte:20}})
             解释说明：通过db.users（表或叫集合的name名）.find({"age":{$lte:20}})  传入一个要查询的对象 {"age":{$lte:20}} $lte 表示 <= 小于等于 20 的 注意只能应用于数字类型的值

            终端输出:{ "_id" : ObjectId("64ccae60096d0763eb92c67a"), "username" : "小明", "age" : 18 }
                    { "_id" : ObjectId("64ccb0f2096d0763eb92c67d"), "username" : "小花", "age" : 20 }
                    { "_id" : ObjectId("64d05eece3a439a763261afb"), "username" : "小方", "age" : 18 }
        */
        db.users.find({"age":{$lte:20}})

        7-3-4-8： 查询 age>=18 并且 age<=20 的记录数据 /*
             筛选- 如所有 age>=18 并且 age<=20 的数据 通过 $gte + $lte 筛选 注意只能应用于数字类型的值
             执行命令 如：db.users.find({"age":{$gte:18,$lte:20}})
             解释说明：通过db.users（表或叫集合的name名）.find({"age":{$gte:18,$lte:20}})  传入一个要查询的对象 {"age":{$gte:18,$lte:20}}  $gte 表示 >= 大于等于18 $lte 表示 <= 小于等于20的 注意只能应用于数字类型的值

            终端输出:{ "_id" : ObjectId("64ccae60096d0763eb92c67a"), "username" : "小明", "age" : 18 }
                    { "_id" : ObjectId("64ccb0f2096d0763eb92c67d"), "username" : "小花", "age" : 20 }
                    { "_id" : ObjectId("64d05eece3a439a763261afb"), "username" : "小方", "age" : 18 }
        */
        db.users.find({"age":{$gte:18,$lte:20}})

         7-3-4-9： 模糊查询-正则写法 username 中包含 小明  的记录数据 /*
             筛选- 如  /小明/  正则表达式 username 中 包含 小明的
             执行命令 如：db.users.find({"username":/小明/})
             解释说明：通过db.users（表或叫集合的name名）.find({"username":/小明/})  传入一个要查询的对象 {"username":/小明/}  /小明/ 正则表达式 username 中 包含 小明的

            终端输出:{ "_id" : ObjectId("64ccae60096d0763eb92c67a"), "username" : "小明", "age" : 18 }
                    { "_id" : ObjectId("64ccae60096d0763eb92c67a"), "username" : "测试小明2", "age" : 18 }

            正则写法都可以进行使用如： db.users.find({"username":/2$/})
            // 模糊查询-正则写法 /2$/ 正则表达式 username 中 $ 以 2 结尾的 记录数据
                db.users.find({"username":/2$/})
                终端输出: { "_id" : ObjectId("64d090bde3a439a763261afc"), "username" : "测试小明2", "age" : 18 }
        */
        db.users.find({"username":/小明/})

         7-3-4-10：只查询返回某几个字段 如：只返回-username 字段 的记录数据 不返回 age 或 _id 等字段 也可以只返回 username 字段数据 
         /*
             筛选- 不要 age 字段相关数据 只返回 username 及 _id 字段 的记录数据。1 表示要 相关字段的数据  0表示不要相关字段的数据
             执行命令 如： db.users.find({},{username:1}) 或  db.users.find({},{age:0})也可以 。1 表示要 相关字段的数据  0表示不要相关字段的数据
             解释说明：通过db.users（表或叫集合的name名）.find({},{username:1}) find第一个参数 {} 为查询的条件不写 给一个空对象，
             第二个参数是过滤的条件 {username:1} 表示只要username 相关字段的数据 注意 _id 是需要手动进行过滤的
            终端输出:{ "_id" : ObjectId("64ccae60096d0763eb92c67a"), "username" : "小明" }
                    { "_id" : ObjectId("64ccb0f2096d0763eb92c67c"), "username" : "小红" }
                    { "_id" : ObjectId("64ccb0f2096d0763eb92c67d"), "username" : "小花" }
                    { "_id" : ObjectId("64d05eece3a439a763261afb"), "username" : "小方" }
                    { "_id" : ObjectId("64d090bde3a439a763261afc"), "username" : "测试小明2" }
            注意: _id 是需要手动进行过滤的, 1 表示要 相关字段的数据  0表示不要相关字段的数据

            筛选- 不要 age 和 _id 字段相关数据只返回 username 字段 过滤 _id 字段 的记录数据 。1 表示要 相关字段的数据  0表示不要相关字段的数据
            执行命令 如： db.users.find({},{username:1,_id:0})
            解释说明： {username:1} 1 表示要username 相关字段的数据  并且 _id:0 过滤 _id 字段的数据 0表示不要相关字段的数据
            终端输出:{ "username" : "小明" }
                    { "username" : "小红" }
                    { "username" : "小花" }
                    { "username" : "小方" }
                    { "username" : "测试小明2" }

            可以写多个如： db.users.find({},{username:1,age:1,_id:0}) 要 username 和 age 字段 不要_id 字段

        */
        db.users.find({},{username:1,_id:0}) // 1 表示要相关字段的数据将字段设置成 1 （如：username:1），0表示不要相关字段的数据将字段设置成 0 （如：_id:0）。

         7-3-4-11：只查询返回某几个字段 + $gt 如：只返回-username 和 _id 字段 的记录数据 并且 age 要大于20 的数据
         /*
            执行命令 如： db.users.find({age:{$gt:20}},{username:1,})
            解释说明：通过db.users（表或叫集合的name名）.find({age:{$gt:20}},{username:1}) find第一个参数 {age:{$gt:20}} 为查询的条件 先查询 age>大于20的数据，
            第二个参数是过滤的条件 {username:1} 表示只要username 相关字段的数据 注意 _id 是需要手动进行过滤的

            终端输出: { "_id" : ObjectId("64ccb0f2096d0763eb92c67c"), "username" : "小红" }
          */

         db.users.find({age:{$gt:20}},{username:1,})
        { "_id" : ObjectId("64ccb0f2096d0763eb92c67c"), "username" : "小红" }


    7-3-4-12：排序 如按照年龄 age 排序（写成数组就是多列查询）
    /*
        升序（从小到大）：
        执行命令 如： db.users.find().sort({age:1})
        解释说明：db.users.find().sort({age:1}) 通过sort() 方法 传入一个对象 age:1  （从小到大） 注意 只能应用于数字类型的值
        终端输出:{ "_id" : ObjectId("64ccae60096d0763eb92c67a"), "username" : "小明", "age" : 18 }
                { "_id" : ObjectId("64d05eece3a439a763261afb"), "username" : "小方", "age" : 18 }
                { "_id" : ObjectId("64d090bde3a439a763261afc"), "username" : "测试小明2", "age" : 18 }
                { "_id" : ObjectId("64ccb0f2096d0763eb92c67d"), "username" : "小花", "age" : 20 }
                { "_id" : ObjectId("64ccb0f2096d0763eb92c67c"), "username" : "小红", "age" : 22 }
        降序（从大到小）：
        执行命令 如： db.users.find().sort({age:-1})
        解释说明：db.users.find().sort({age:-1}) 通过sort() 方法 传入一个对象 age:-1  （从大到小） 注意 只能应用于数字类型的值
        终端输出:{ "_id" : ObjectId("64ccb0f2096d0763eb92c67c"), "username" : "小红", "age" : 22 }
        { "_id" : ObjectId("64ccb0f2096d0763eb92c67d"), "username" : "小花", "age" : 20 }
        { "_id" : ObjectId("64ccae60096d0763eb92c67a"), "username" : "小明", "age" : 18 }
        { "_id" : ObjectId("64d05eece3a439a763261afb"), "username" : "小方", "age" : 18 }
        { "_id" : ObjectId("64d090bde3a439a763261afc"), "username" : "测试小明2", "age" : 18 }
    */


    7-3-4-13：查询前多少条数据 （如查询前 3 条数据 从第一条开始计算 下标:0-2）
    /*
    查询前 3 条数据:
    执行命令 如： db.users.find().limit(3) 相当于要 几个数据 当前是 3， 因此就是要 3条数据 
    解释说明：db.users.find().limit(3) 通过 limit() 方法 传入一个数字类型的参数  从第一条开始计算 下标:0-2
    终端输出:{ "_id" : ObjectId("64ccae60096d0763eb92c67a"), "username" : "小明", "age" : 18 }
            { "_id" : ObjectId("64ccb0f2096d0763eb92c67c"), "username" : "小红", "age" : 22 }
            { "_id" : ObjectId("64ccb0f2096d0763eb92c67d"), "username" : "小花", "age" : 20 }
    */
    db.users.find().limit(3) // 查询前 3 条数据

    7-3-4-14：查询 - 第 几 条之后的数据 （如 第 3 条 条之后的数据 一直到最后一条数据）
     /*
    查询 第 3 条 之后的数据:
    执行命令 如： db.users.find().skip(3)  相当于跳过 几个数据 当前是 3，要跳过3条数据 
    解释说明：db.users.find().skip(3) 通过 skip() 方法 传入一个数字类型的参数 相当于要跳过 几个数据 当前是 3 ，要跳过3条数据 从第4条开始计算 一直到最后一条数据
    终端输出:{ "_id" : ObjectId("64d05eece3a439a763261afb"), "username" : "小方", "age" : 18 }
            { "_id" : ObjectId("64d090bde3a439a763261afc"), "username" : "测试小明2", "age" : 18 }
    */
    db.users.find().skip(3) // 查询 第 3 条 之后的数据

     7-3-4-15：查询 - 在0-2之间 的数据 （可应用于 模拟 分页、懒加载 等等功能 如：前端传入  pageNum 第一页  pageNum=1 时 返回 0-2之间 的数据 - 目前存的 数据量小 模拟返回 2条）
     /*
     模拟 分页 - 数据量小 每次 返回 2 条数据
        第一页时 的数据:
        执行命令 如： db.users.find().skip(0).limit(2)
        解释说明：db.users.find().skip(0).limit(2) 通过 skip() 方法 要跳过 0 条数据  通过 limit(2) 方法 要 2  条数据
        终端输出:{ "_id" : ObjectId("64ccae60096d0763eb92c67a"), "username" : "小明", "age" : 18 }
                { "_id" : ObjectId("64ccb0f2096d0763eb92c67c"), "username" : "小红", "age" : 22 }

        第二页时 的数据:
        执行命令 如： db.users.find().skip(2).limit(2)
        解释说明：db.users.find().skip(2).limit(2) 通过 skip() 方法 要跳过 2 条数据  通过 limit(2) 方法 要 2  条数据
        终端输出:{ "_id" : ObjectId("64ccb0f2096d0763eb92c67d"), "username" : "小花", "age" : 20 }
                { "_id" : ObjectId("64d05eece3a439a763261afb"), "username" : "小方", "age" : 18 }

        以此类推 如 前端传入 pageNum=1 页码  pagesize=10 一页显示多少条数据
        命令： db.users.find().skip((pageNum-1)*pagesize).limit(pagesize)
        解释说明：skip((pageNum-1)*pagesize) 公式：(pageNum-1)*pagesize ，（ *pagesize 为 每一页 要跳过的多少条数据） 前端传入 pageNum = 1 为第一页 要跳过的数据 ，limit(pagesize) 要 pagesize 条的数据

        如下：
        db.users.find().skip((1-1)*2).limit(2) 第一页 要跳过 0 条数据  要2条数据
        db.users.find().skip((2-1)*2).limit(2) 第二页 要跳过 2 条数据  要2条数据
        db.users.find().skip((3-1)*2).limit(2) 第三页 要跳过 4 条数据  要2条数据
        // 每次 返回 10 条数据也是 如此 ：db.users.find().skip((1-1)*2).limit(10) 第一页 跳过 0 条数据  要10条数据


        当然你也可以 组合上排序使用  先进行 排序(升序（从小到大）) 然后 跳过 0 条数据  要2 条数据 分页 返回
        执行命令 如：db.users.find().sort({age:1}).skip((1-1)*2).limit(2)
        终端输出:{ "_id" : ObjectId("64ccae60096d0763eb92c67a"), "username" : "小明", "age" : 18 }
                { "_id" : ObjectId("64d05eece3a439a763261afb"), "username" : "小方", "age" : 18 }
    */
    db.users.find().skip(0).limit(2) //模拟 分页 - 第一页时： 要跳过 0 条数据 ，要 2 条的数据  目前存的 数据量小 模拟返回 2条
    db.users.find().skip(2).limit(2) //模拟 分页 - 第二页时： 要跳过 2 条数据 ，要 2 条的数据  目前存的 数据量小 模拟返回 2条

    //先进行 排序(升序（从小到大）) 然后 分页 返回
    db.users.find().sort({age:1}).skip((1-1)*2).limit(2)



    7-3-4-16：查询 - age=23 或 age=24 或 age=25  的数据 可以有两个查询条件
    /*
        执行命令 如： db.users.find({$or:[{age:23},{age:24},{age:25}]})
        解释说明：db.users.find({$or:[{age:23},{age:24}]}) 传入一个对象 通过 $or 声明  并且传入一个数组 ，数组内部可以写 多个查询条件
        终端输出:{ "_id" : ObjectId("64d1ed1ae3a439a763261b01"), "username" : "ddd", "age" : 23 }
                { "_id" : ObjectId("64d1ed1ae3a439a763261b02"), "username" : "eee", "age" : 24 }
                { "_id" : ObjectId("64d1ed1ae3a439a763261b03"), "username" : "fff", "age" : 25 }
        你也可以 传入 第二个参数是过滤的不要 username 字段 如：db.users.find({$or:[{age:23},{age:24},{age:25}]},{username:0})

    */
    db.users.find({$or:[{age:23},{age:24},{age:25}]}) // $or  多个查询条件

     7-3-4-17：查询 只要第一条 数据。
     /*
        只要第一条 数据
        执行命令 如： db.users.find({$or:[{age:23},{age:24},{age:25}]})
        终端输出:{
            "_id" : ObjectId("64ccae60096d0763eb92c67a"),
            "username" : "小明",
            "age" : 18
        }
     */
    db.users.findOne()

    7-3-4-18：查询 表（集合）中有多少条 数据长度 。
     /*
        表（集合）中有多少条 数据 类似 data.length
        执行命令 如： db.users.find().count()
        终端输出: 12
        如： 分页 返回总的数据条数 告诉前端可以分 多少页数 如 100（返回总的数据条数）/ 10（一页10条数据）= 10 （一共多少页数）

        也可以查询 age=18 总共有多少条 数据
        执行命令 如： db.users.find({age:18}).count()
        终端输出: 3
     */
    db.users.find().count() // users 表（集合）中 总的数据条数 => 12条
    db.users.find({age:18}).count() //  age=18 有多少条数据 => 3条






        // 查看当前使用的数据库
        db 或 db.getName() // 都可以查看当前使用的数据库
        // 显示当前DB状态
        db.stats()
        // 查看当前DB版本
        db.version()
        // 查看当前DB的链接机器地址
        db.getMongo()
        // 删除数据库
        db.dropDatabase()