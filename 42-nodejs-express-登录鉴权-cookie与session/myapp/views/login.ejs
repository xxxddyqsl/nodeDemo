<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>

<body>
    <h1>后台系统-用户管理业务+权限-登录页 </h1>
    <div>
        <div>
            用户名：<input type="text" id="username">
        </div>
        <div>
            密码：<input type="password" id="password">
        </div>
        <button onclick="login()">登录</button>
        <button onclick="ToRegister()">进入注册页</button>
    </div>
</body>
<script>
    function getCookie() {
        // 获取 cookie
        let cookieData = {};
        document.cookie.split(';').forEach((param) => {
            // 以=分割 数组每一项 的 字符串 取出key val
            let [key, val] = param.split('=');
            key = key.replace(/\s+/g, "");// 去除空格
            cookieData[key] = val;
        })
        return cookieData;
    }
    function getParams() {
        return {
            username: document.querySelector('#username').value,
            password: document.querySelector('#password').value,
        }
    }
    /*
        按照 和后端约定的 语义化规范 - RESTful风格规范 编写 正常来说应该是使用 put 请求，
        但是登陆的话不是单独请求一个资源，而是对于用户信息验证，创建一个会话session。一般用POST请求。
        如果不是创建session，而是获取一个不会存在服务端的token并且没有保存登录状态的需求，只是临时登录验证token 可以使用 put
    */
    function login() {
        let params = getParams();
        console.log(params)
        fetch('/api/login', {
            method: 'POST',
            body: JSON.stringify(params),
            headers: { 'Content-Type': 'application/json' },// 请求头信息配置 告诉后端传入的参数是什么格式(当前为application/json JSON字符串格式) 按什么格式解析参数
        }).then(res => {
            //  接口返回的为json数据 直接 return res.json(); 按JSON的格式去解析返回数据 具体案例  14-node内置模块-http模块-跨域-cors 中有描述
            return res.json();
        }).then(res => {
            console.log(res);
            alert(`${res.Message}`)
            if (res.Code == 0) {
                window.location.href = './home'
            }
        })
    }
    // 进入注册 页
    function ToRegister(){
        window.location.href = './'
    }
</script>

</html>