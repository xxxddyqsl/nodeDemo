<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>聊天室</title>
    <style>
        .message{
            width: 530px;
            height: 400px;
            font-size: 14px;
            border: 1px solid red;
            overflow: auto;
            display: flex;
            align-items: center;
            justify-content: flex-start;
            flex-direction: column;
        }
        .message .msg_item_left,.msg_item_right{
            width: 60%;
            display: flex;
        }
        .msg_item_left{
            
            margin-right: auto;
        }
        .msg_item_right{
            margin-left: auto;
        }
        .msg_item_content{
            display: flex;
            flex-wrap: wrap;
            flex: 1;
        }
    </style>
</head>

<body>
    <h1>聊天室-模拟群聊</h1>
    <h4 class="User">

    </h4>
    <div class="message">

    </div>
    <button onclick="sendBroadcast()">广播消息给其他用户</button>
</body>
<script src="/js/axios.min.js"></script>
<script>
    // 设置 axios 拦截器 请求发出去之前 携带 token 请求回来之后更新本地存入的token（token的过期时间）
    axios.interceptors.request.use(function (config) {
        // console.log(`每次发出请求成功之前,会先执行的方法， `)
        let token = localStorage.getItem('token');
        // 每次给后端发请求之前 将token 设置到 header 中 传给 后端 校验 是否过期  Authorization 字段（前后端 共同约定的token字段：Authorization）
        /*
            手动模拟测试token失效 ： 手动删除 localStorage 里的token  前端传入头的token ( Authorization: 'Bearer null') 而后端通过req.headers['authorization']?.split(' ')[1]，
            字符串截获取token出来的 为 'null' string类型 ，
            字符串 'null' 不为假 进入校验token ，JWT.verify(token) 校验不通过返回 false ，给前端返回 错误码 401 及 数据
        */
        // 给后端 传入 token 时 有一个不成文的规定 就是拼接上 Bearer+空格+ token ，当然不这么写 也是可以 只是推荐这样写
        config.headers.Authorization = `Bearer ${token}`;//拼接上 Bearer+空格+ token
        console.log(' axios 拦截器', token)
        return config;
    }, function (error) {
        // console.log(`每次发出请求失败之前,会执行的方法`)
        // Do something with request error
        return Promise.reject(error);
    });
    axios.interceptors.response.use(function (response) {
        // console.log(`任何请求成功后，第一个调用的方法，然后才会走 下面 axios.post 后的.then()方法`,response)

        // 统一在拦截器中 获取后端设置在header头里面的token字段（前后端 共同约定的：Authorization）
        const { authorization } = response.headers;// header头里面的Authorization 为小写
        console.log(' axios 拦截器', response.headers)
        // 如果后端返回的Authorization为真， 存入 本地
        authorization && localStorage.setItem('token', authorization)
        // Any status code that lie within the range of 2xx cause this function to trigger
        // Do something with response data
        return response;
    }, function (error) {
        console.log(`任何请求失败后，第一个调用的方法`, error)
        // 统一处理  报错 （token 失效后端返回报错 错误码：401）
        if (error.response.status === 401) {// token 失效 后端返回401
            alert(`token过期，请重新登录。 后端返回数据：${error.response.data.Message}`)
            //  token 失效 销毁 本地存的token
            localStorage.removeItem('token');
            // 跳转到 登录页
            window.location.href = './login'
        }
        // Any status codes that falls outside the range of 2xx cause this function to trigger
        // Do something with response error
        return Promise.reject(error);
    });
</script>

<script src="/js/util.js"></script>
<script>
    var defaultUser= '123123';
    // 用户列表
    let token = localStorage.getItem('token');
    document.querySelector('.User').innerHTML='userId:'+defaultUser;
     // 客户端 创建  websocket 建立连接 携带登录成功后端返回的 token 后端验证
     const ws = new WebSocket('ws://localhost:8080');
    // WebSocket 对象有两个方法：send()和close()。send方法去发送消息。
    //连接 成功后触发回调 - 一旦服务端响应WebSocket连接请求，就会触发open事件。响应的回调函数称为onopen。
    ws.onopen = (e) => {
        console.log(e,)
        // 给服务端 发送消息 - 字符串 转 blob
        let data=JSON.stringify({senderId:defaultUser,content:`chat-${defaultUser}-客户端-连接成功-发送消息`,})
        ws.send(util.stringToBlob(data))
    }
    // 当消息被接受会触发消息事件，响应的回调函数叫做onmessage。如下：
    // 除了文本消息，WebSocket消息机制还能处理二进制数据，有Blob和ArrayBuffer两种类型，在读取到数据之前需要决定好数据的类型。
    ws.onmessage = async (msg) => {
        // 返回的数据类型 -  //将Blob 对象转换成 ArrayBuffer
        let {buf,reader} =  await util.SocketType(msg.data, ws)
        // ArrayBuffer 转 字符串
        let str =  await util.ArrayBufToString(buf,reader)
        console.log(msg, ws.binaryType)
        createMessage(str)
        console.log('data==>', str)
    }
    // 如果发生意外的失败会触发error事件 异常处理
    ws.onerror = (err) => {
        console.error(err)
    }
    // 连接关闭的时候回触发这个事件，对应onclose方法，连接关闭之后，服务端和客户端就不能再收发消息。
    ws.onclose = (e) => {
        console.log("Connection closed", e);
    }

    function createMessage(msg){
        let data = JSON.parse(msg);
        let html;
        if(data.senderId == 'serverId' ){
            return console.log('登录成功')
        }
        let node =document.createElement('div');
        
        if(data.senderId==defaultUser){
            node.className='msg_item_right'
            html=`
                    <div  class='msg_item_content'>${data.content}</div>
                    <span>：${defaultUser}</span>
            `
        }else{
            node.className='msg_item_left'
            html=`
                    <span>${data.senderId}：</span>
                    <div class='msg_item_content'>${data.content}</div>
            `
        }
        node.innerHTML=html;
        document.querySelector('.message').append(node)
    }
</script>
</html>