业务分层
 说明介绍：如 在 40-nodejs-接口规范化-RESTful架构风格 案例 中 虽然优化了api接口 语义化很清晰 但是那个 api.js 接口文件 是在 routes（路由文件夹中），
并且在api.js中接口的逻辑都在这一个文件中，后续 api.js文件中 接口 还会涉及一些 加密解密，逻辑就非常的复杂，
这个文件整个就会变得特别的乱套，这个时候 我们就会将业务需求进行分离开，也就是说将文件夹在多创建几个，
每个文件夹中只是负责一件事件，因此需要进行业务分层。


router.js ： 负责 将请求分发给 C 层
controller.js ： C层 负责处理业务逻辑（ V 与 M 之间的沟通）
views : V层 负责展示页面 - （ V层 可以认为就是前端的模板文件html 渲染层）
model ： M层 负责处理数据 （增、删、改、查） - （ M层 可以认为就是后端提供数据 ，但是M层不能把数据直接给 V层啊，需要经过C层的一个分配 ）

MVC的架构 模式


示意图 说明 -在当前文件夹下 业务分层示意图.jpg 可见


具体的逻辑就是：
            index.js 服务器入口文件   负责接收客户端请求
                        ↓
                        ↓index.js 做好中间件（app.js） 收客户端请求  交给 路由 (routes 文件夹内的配的路由级中间件)
                        ↓
            router.js 路由文件 负责将 index.js 接收到的请求 分发给 C层 controller.js
                        ↓
                        ↓ 路由模块（分发） 知道这个请求是给谁 那个请求是给哪个路由的  请求分发给 controller.js 这一层
                        ↓
            C层 controller.js 负责处理请求业务逻辑（把数据model 交给 视图 views）,把数据（如接口请求的参数）从前端拿到，并且数据在返回给前端（这个数据就是 从model M层 取到的数据）
            /                                               ↖
           /                                                  \
        ↙                                                      \
    V层 html文件                M层  hero.js 负责数据的 增、删、改、查


// 当前 M层 model 应该创建一个文件夹 model 专门存在处理  增、删、改、查 ，但是当前因为 MongoDB 创建 访问数据库表的 限制模型的，
因此另创建一个 services 文件夹 负责 处理 M层 model 负责数据的 增、删、改、查，

1：创建了 controllers文件夹 C层 负责处理请求业务逻辑
2：创建 services 文件夹  M层 model 负责操作数据库 增、删、改、查（因为 MongoDB 创建 访问数据库表的 限制模型的model文件夹，因此另创建一个同语义化的 services 文件夹）
3：V层 渲染层 就是在 views 文件夹


业务分层 - 在当前文件夹下的myapp 可以 与 之前的 40-nodejs-接口规范化-RESTful架构风格 内 myapp 下的文件夹进行对比