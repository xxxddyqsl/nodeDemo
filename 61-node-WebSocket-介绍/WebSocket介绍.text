WebSocket介绍

应用场景:
1·弹幕
(2)媒体聊天
(3)协同编辑
(4)基于位置的应用 - 如 外卖人员位置
(5)体育实况更新
(6)股票基金报价实时更新

WebSocket并不是全新的协议，而是利用了HTTP协议来建立连接。我们来看看WebSocket连接是如何创建的。
首先，WebSocket连接必须由浏览器发起因为请求协议是一个标准的HTTP请求，格式如下

    GET ws://1ocalhost:3000/ws/chat HTTP/1.1
    Host: localhost
    Upgrade: websocket
    Connection: Upgrade
    origin: http://1ocalhost:3000
    Sec-WebSocket-Key: client-random-string
    Sec-WebSocket-Version: 13

该请求和普通的HTTP请求有几点不同
    1.GET请求的地址不是类似/path/，而是以ws://开头的地址;
    2.请求头upgrade: websocket和connection: Upgrade 表示这个连接将要被转换为WebSocket连接
    3.sec-Websocket-Key是用于标识这个连接，并非用于加密数据
    4.sec-Websocket-Version指定了WebSocket的协议版本

随后，服务器如果接受该请求，就会返回如下响应
HTTP/1.1 101 Switching Protocols
Upgrade: websocket
Connection: Upgrade
Sec-WebSocket-Accept: server-random-string


该响应代码101表示本次连接的HTTP协议即将被更改，更改后的协议就是upgrade: websocket 指定的WebSocket协议。

版本号和子协议规定了双方能理解的数据格式，以及是否支持压缩等等。如果仅使用WebSocket的AP1，就不需要关心这些。

现在，一个WebSocket连接就建立成功，浏览器和服务器就可以随时主动发送消息给对方。消息有两种，
一种是文本，一种是二进制数据。通常，我们可以发送SON格式的文本，这样，在浏览器处理起来就十分容易。

为什么WebSocket连接可以实现全双工通信而HTTP连接不行呢?实际上HTTP协议是建立在TCP协议之上的，
TCP协议本身就实现了全双工通信，但是HTTP协议的请求- 应答机制限制了全双工通信。WebSocket连接建立以后，
其实只是简单规定了一下:接下来，咱们通信就不使用HTTP协议了，直接互相发数据吧。

安全的WebSocket连接机制和HTTPS类似。
首先，浏览器用wss://xxx 创建WebSocket连接时，
会先通过HTTPS创建安全的连接，
然后，该HTTPS连接升级为WebSocket连接，底层通信走的仍然是安全的SSL/TLS协议。

浏览器支持
很显然，要支持WebSocket通信，浏览器得支持这个协议，这样才能发出ws://xxx的请求。目前，支持WebSocket的主流浏览器如下:
Chrome


服务器支持
由于WebSocket是一个协议，服务器具体怎么实现，取决于所用编程语言和框架本身。
Node.js本身支持的协议包括TCP协议和HTTP协议，要支持WebSocket协议，需要对Nodejs提供的HTTPServer做额外的开发。
已经有若干基于Node.js的稳定可靠的WebSocket实现，我们直接用npm安装使用即可。


 nodejs 中的 ws 模块 