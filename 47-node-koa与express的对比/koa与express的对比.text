koa与express的对比：

1：koa vs express
    通常都会说 Koa 是洋葱模型，这重点在于中间件的设计。但是按照上面的分析，会发现 Express 也是类似的，
    不同的是Express 中间件机制使用了 Callback 实现，这样如果出现异步则可能会使你在执行顺序上感到困惑，
    因此如果我们想做接口耗时统计、错误处理 Koa 的这种中间件模式处理起来更方便些。最后一点响应机制也很重要Koa 不是立即响应，
    是整个中间件处理完成在最外层进行了响应，而 Express 则是立即响应。

2：更轻量
    。koa 不提供内置的中间件;
    。koa 不提供路由，而是把路由这个库分离出来了 (koa/router) ，如果 想使用路由需要单独的 引入这个库(koa/router)

3：Context对象
    koa增加了一个Context的对象，作为这次请求的上下文对象(在koa2中作为中间件的第一个参数传入),
    同时Context上也挂载了Request和Response两个对象。和Express类似，这两个对象都提供了大量的便捷方法辅助开发，
    这样的话对于在保存一些公有的参数的话变得更加合情合理。

4：异步流程控制
    express采用callback （回调函数） 来处理异步，  koa v1采用generator，koa v2 采用async/await ，
    generator和async/await使用同步的写法来处理异步，明显好于callback和promise。

5： 中间件模型
    express基于connect中间件，线性模型 （就是express中 只有调用 next() 下一个中间件 才能执行 否则下一个中间件 无法执行，类似流水线加工一样 ）。

    koa中间件采用洋葱模型(对于每个中间件，在完成了一些事情后，可以非常优雅的将控制权传递给下一个中间件，并能够等待它完成，当后续的中间件完成处理后，控制权又回到了自己)，
    koa洋葱模型-说明解释：
    A 中间件内部 代码逻辑是: console.log('调用next()执行 B中间件之前 ') 调用next() console.log('调用next()执行 B中间件之后 '),
    此时执行 A 中间件内部执行完 第一个console.log ，执行调用 next() 执行 B中间件（此时代码执行的控制权 交给了B中间件），B中间件执行完成之后 ，
    代码执行的控制权会 回到A中间件继续执行 A中间件内的代码逻辑( 继续执行第二个 console.log)

6 ：验证  koa洋葱模型
    验证的代码案例
    同步情况下 - 可见：
        01-express-同步.js
        02-koa-同步.js

    异步情况下 - 可见:
        03-express-异步.js
        04-koa-异步.
        
7: 总结：
    express：
        只能按照顺序去写 （类似流水线加工一样），想要next() 后等待下一个中间件的结果是不可以的。
        express 设计思路就是 立即执行不会等待 下一个中间件的结果,按照流水线 线型的模式去设计的。

    koa：
        A中间件交出 控制权 next()执行下一个中间件 (通过async/await的异步等待机制)  可以等待下一个中间件的返回结果，
        并且控制权也会 回到 A 中间件

具体 想要根据 应用场景 设计思路 来看